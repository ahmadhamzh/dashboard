// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ImageVerification ImageVerification validates that images that match the specified pattern
// are signed with the supplied public key. Once the image is verified it is
// mutated to include the SHA digest retrieved during the registration.
//
// swagger:model ImageVerification
type ImageVerification struct {

	// Deprecated.
	AdditionalExtensions map[string]string `json:"additionalExtensions,omitempty"`

	// Deprecated. Use annotations per Attestor instead.
	Annotations map[string]string `json:"annotations,omitempty"`

	// Attestations are optional checks for signed in-toto Statements used to verify the image.
	// See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the
	// OCI registry and decodes them into a list of Statement declarations.
	Attestations []*Attestation `json:"attestations"`

	// Attestors specified the required attestors (i.e. authorities)
	// +kubebuilder:validation:Optional
	Attestors []*AttestorSet `json:"attestors"`

	// CosignOCI11 enables the experimental OCI 1.1 behaviour in cosign image verification.
	// Defaults to false.
	// +optional
	CosignOCI11 bool `json:"cosignOCI11,omitempty"`

	// Deprecated. Use ImageReferences instead.
	// +kubebuilder:validation:Optional
	Image string `json:"image,omitempty"`

	// ImageReferences is a list of matching image reference patterns. At least one pattern in the
	// list must match the image for the rule to apply. Each image reference consists of a registry
	// address (defaults to docker.io), repository, image, and tag (defaults to latest).
	// Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
	// +kubebuilder:validation:Optional
	ImageReferences []string `json:"imageReferences"`

	// Deprecated. Use KeylessAttestor instead.
	Issuer string `json:"issuer,omitempty"`

	// Deprecated. Use StaticKeyAttestor instead.
	Key string `json:"key,omitempty"`

	// MutateDigest enables replacement of image tags with digests.
	// Defaults to true.
	// +kubebuilder:default=true
	// +kubebuilder:validation:Optional
	MutateDigest bool `json:"mutateDigest,omitempty"`

	// Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule.
	// If specified Repository will override the default OCI image repository configured for the installation.
	// The repository can also be overridden per Attestor or Attestation.
	Repository string `json:"repository,omitempty"`

	// Required validates that images are verified i.e. have matched passed a signature or attestation check.
	// +kubebuilder:default=true
	// +kubebuilder:validation:Optional
	Required bool `json:"required,omitempty"`

	// Deprecated. Use KeylessAttestor instead.
	Roots string `json:"roots,omitempty"`

	// SkipImageReferences is a list of matching image reference patterns that should be skipped.
	// At least one pattern in the list must match the image for the rule to be skipped. Each image reference
	// consists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest).
	// Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
	// +kubebuilder:validation:Optional
	SkipImageReferences []string `json:"skipImageReferences"`

	// Deprecated. Use KeylessAttestor instead.
	Subject string `json:"subject,omitempty"`

	// UseCache enables caching of image verify responses for this rule.
	// +kubebuilder:default=true
	// +kubebuilder:validation:Optional
	UseCache bool `json:"useCache,omitempty"`

	// VerifyDigest validates that images have a digest.
	// +kubebuilder:default=true
	// +kubebuilder:validation:Optional
	VerifyDigest bool `json:"verifyDigest,omitempty"`

	// failure action
	FailureAction ValidationFailureAction `json:"failureAction,omitempty"`

	// image registry credentials
	ImageRegistryCredentials *ImageRegistryCredentials `json:"imageRegistryCredentials,omitempty"`

	// type
	Type ImageVerificationType `json:"type,omitempty"`

	// validate
	Validate *ValidateImageVerification `json:"validate,omitempty"`
}

// Validate validates this image verification
func (m *ImageVerification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttestations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttestors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailureAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageRegistryCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageVerification) validateAttestations(formats strfmt.Registry) error {
	if swag.IsZero(m.Attestations) { // not required
		return nil
	}

	for i := 0; i < len(m.Attestations); i++ {
		if swag.IsZero(m.Attestations[i]) { // not required
			continue
		}

		if m.Attestations[i] != nil {
			if err := m.Attestations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attestations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attestations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ImageVerification) validateAttestors(formats strfmt.Registry) error {
	if swag.IsZero(m.Attestors) { // not required
		return nil
	}

	for i := 0; i < len(m.Attestors); i++ {
		if swag.IsZero(m.Attestors[i]) { // not required
			continue
		}

		if m.Attestors[i] != nil {
			if err := m.Attestors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attestors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attestors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ImageVerification) validateFailureAction(formats strfmt.Registry) error {
	if swag.IsZero(m.FailureAction) { // not required
		return nil
	}

	if err := m.FailureAction.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("failureAction")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("failureAction")
		}
		return err
	}

	return nil
}

func (m *ImageVerification) validateImageRegistryCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.ImageRegistryCredentials) { // not required
		return nil
	}

	if m.ImageRegistryCredentials != nil {
		if err := m.ImageRegistryCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("imageRegistryCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("imageRegistryCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *ImageVerification) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *ImageVerification) validateValidate(formats strfmt.Registry) error {
	if swag.IsZero(m.Validate) { // not required
		return nil
	}

	if m.Validate != nil {
		if err := m.Validate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this image verification based on the context it is used
func (m *ImageVerification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttestations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAttestors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailureAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImageRegistryCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageVerification) contextValidateAttestations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attestations); i++ {

		if m.Attestations[i] != nil {

			if swag.IsZero(m.Attestations[i]) { // not required
				return nil
			}

			if err := m.Attestations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attestations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attestations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ImageVerification) contextValidateAttestors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attestors); i++ {

		if m.Attestors[i] != nil {

			if swag.IsZero(m.Attestors[i]) { // not required
				return nil
			}

			if err := m.Attestors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attestors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attestors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ImageVerification) contextValidateFailureAction(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.FailureAction) { // not required
		return nil
	}

	if err := m.FailureAction.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("failureAction")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("failureAction")
		}
		return err
	}

	return nil
}

func (m *ImageVerification) contextValidateImageRegistryCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.ImageRegistryCredentials != nil {

		if swag.IsZero(m.ImageRegistryCredentials) { // not required
			return nil
		}

		if err := m.ImageRegistryCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("imageRegistryCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("imageRegistryCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *ImageVerification) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *ImageVerification) contextValidateValidate(ctx context.Context, formats strfmt.Registry) error {

	if m.Validate != nil {

		if swag.IsZero(m.Validate) { // not required
			return nil
		}

		if err := m.Validate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImageVerification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageVerification) UnmarshalBinary(b []byte) error {
	var res ImageVerification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
