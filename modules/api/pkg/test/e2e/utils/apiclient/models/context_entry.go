// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ContextEntry ContextEntry adds variables and data sources to a rule Context. Either a
// ConfigMap reference or a APILookup must be provided.
// +kubebuilder:oneOf:={required:{configMap}}
// +kubebuilder:oneOf:={required:{apiCall}}
// +kubebuilder:oneOf:={required:{imageRegistry}}
// +kubebuilder:oneOf:={required:{variable}}
// +kubebuilder:oneOf:={required:{globalReference}}
//
// swagger:model ContextEntry
type ContextEntry struct {

	// Name is the variable name.
	Name string `json:"name,omitempty"`

	// api call
	APICall *ContextAPICall `json:"apiCall,omitempty"`

	// config map
	ConfigMap *ConfigMapReference `json:"configMap,omitempty"`

	// global reference
	GlobalReference *GlobalContextEntryReference `json:"globalReference,omitempty"`

	// image registry
	ImageRegistry *ImageRegistry `json:"imageRegistry,omitempty"`

	// variable
	Variable *Variable `json:"variable,omitempty"`
}

// Validate validates this context entry
func (m *ContextEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPICall(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGlobalReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContextEntry) validateAPICall(formats strfmt.Registry) error {
	if swag.IsZero(m.APICall) { // not required
		return nil
	}

	if m.APICall != nil {
		if err := m.APICall.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiCall")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apiCall")
			}
			return err
		}
	}

	return nil
}

func (m *ContextEntry) validateConfigMap(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigMap) { // not required
		return nil
	}

	if m.ConfigMap != nil {
		if err := m.ConfigMap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configMap")
			}
			return err
		}
	}

	return nil
}

func (m *ContextEntry) validateGlobalReference(formats strfmt.Registry) error {
	if swag.IsZero(m.GlobalReference) { // not required
		return nil
	}

	if m.GlobalReference != nil {
		if err := m.GlobalReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("globalReference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("globalReference")
			}
			return err
		}
	}

	return nil
}

func (m *ContextEntry) validateImageRegistry(formats strfmt.Registry) error {
	if swag.IsZero(m.ImageRegistry) { // not required
		return nil
	}

	if m.ImageRegistry != nil {
		if err := m.ImageRegistry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("imageRegistry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("imageRegistry")
			}
			return err
		}
	}

	return nil
}

func (m *ContextEntry) validateVariable(formats strfmt.Registry) error {
	if swag.IsZero(m.Variable) { // not required
		return nil
	}

	if m.Variable != nil {
		if err := m.Variable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("variable")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("variable")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this context entry based on the context it is used
func (m *ContextEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAPICall(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGlobalReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImageRegistry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVariable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContextEntry) contextValidateAPICall(ctx context.Context, formats strfmt.Registry) error {

	if m.APICall != nil {

		if swag.IsZero(m.APICall) { // not required
			return nil
		}

		if err := m.APICall.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiCall")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apiCall")
			}
			return err
		}
	}

	return nil
}

func (m *ContextEntry) contextValidateConfigMap(ctx context.Context, formats strfmt.Registry) error {

	if m.ConfigMap != nil {

		if swag.IsZero(m.ConfigMap) { // not required
			return nil
		}

		if err := m.ConfigMap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configMap")
			}
			return err
		}
	}

	return nil
}

func (m *ContextEntry) contextValidateGlobalReference(ctx context.Context, formats strfmt.Registry) error {

	if m.GlobalReference != nil {

		if swag.IsZero(m.GlobalReference) { // not required
			return nil
		}

		if err := m.GlobalReference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("globalReference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("globalReference")
			}
			return err
		}
	}

	return nil
}

func (m *ContextEntry) contextValidateImageRegistry(ctx context.Context, formats strfmt.Registry) error {

	if m.ImageRegistry != nil {

		if swag.IsZero(m.ImageRegistry) { // not required
			return nil
		}

		if err := m.ImageRegistry.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("imageRegistry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("imageRegistry")
			}
			return err
		}
	}

	return nil
}

func (m *ContextEntry) contextValidateVariable(ctx context.Context, formats strfmt.Registry) error {

	if m.Variable != nil {

		if swag.IsZero(m.Variable) { // not required
			return nil
		}

		if err := m.Variable.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("variable")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("variable")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContextEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContextEntry) UnmarshalBinary(b []byte) error {
	var res ContextEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
