// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ForEachMutation ForEachMutation applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
//
// swagger:model ForEachMutation
type ForEachMutation struct {

	// Context defines variables and data sources that can be used during rule execution.
	// +optional
	Context []*ContextEntry `json:"context"`

	// List specifies a JMESPath expression that results in one or more elements
	// to which the validation logic is applied.
	List string `json:"list,omitempty"`

	// PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
	// See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
	// +optional
	PatchesJSON6902 string `json:"patchesJson6902,omitempty"`

	// foreach
	Foreach ForEachMutationWrapper `json:"foreach,omitempty"`

	// order
	Order ForeachOrder `json:"order,omitempty"`

	// patch strategic merge
	PatchStrategicMerge Any `json:"patchStrategicMerge,omitempty"`

	// preconditions
	Preconditions *AnyAllConditions `json:"preconditions,omitempty"`
}

// Validate validates this for each mutation
func (m *ForEachMutation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreconditions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ForEachMutation) validateContext(formats strfmt.Registry) error {
	if swag.IsZero(m.Context) { // not required
		return nil
	}

	for i := 0; i < len(m.Context); i++ {
		if swag.IsZero(m.Context[i]) { // not required
			continue
		}

		if m.Context[i] != nil {
			if err := m.Context[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("context" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("context" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ForEachMutation) validateOrder(formats strfmt.Registry) error {
	if swag.IsZero(m.Order) { // not required
		return nil
	}

	if err := m.Order.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("order")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("order")
		}
		return err
	}

	return nil
}

func (m *ForEachMutation) validatePreconditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Preconditions) { // not required
		return nil
	}

	if m.Preconditions != nil {
		if err := m.Preconditions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preconditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preconditions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this for each mutation based on the context it is used
func (m *ForEachMutation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreconditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ForEachMutation) contextValidateContext(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Context); i++ {

		if m.Context[i] != nil {
			if err := m.Context[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("context" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("context" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ForEachMutation) contextValidateOrder(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Order.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("order")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("order")
		}
		return err
	}

	return nil
}

func (m *ForEachMutation) contextValidatePreconditions(ctx context.Context, formats strfmt.Registry) error {

	if m.Preconditions != nil {
		if err := m.Preconditions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preconditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preconditions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ForEachMutation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ForEachMutation) UnmarshalBinary(b []byte) error {
	var res ForEachMutation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
