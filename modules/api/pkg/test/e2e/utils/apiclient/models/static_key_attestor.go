// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StaticKeyAttestor static key attestor
//
// swagger:model StaticKeyAttestor
type StaticKeyAttestor struct {

	// KMS provides the URI to the public key stored in a Key Management System. See:
	// https://github.com/sigstore/cosign/blob/main/KMS.md
	KMS string `json:"kms,omitempty"`

	// Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly
	// specified or can be a variable reference to a key specified in a ConfigMap (see
	// https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret
	// elsewhere in the cluster by specifying it in the format "k8s://<namespace>/<secret_name>".
	// The named Secret must specify a key `cosign.pub` containing the public key used for
	// verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret).
	// When multiple keys are specified each key is processed as a separate staticKey entry
	// (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.
	PublicKeys string `json:"publicKeys,omitempty"`

	// Deprecated. Use attestor.signatureAlgorithm instead.
	// +kubebuilder:default=sha256
	SignatureAlgorithm string `json:"signatureAlgorithm,omitempty"`

	// ctlog
	Ctlog *CTLog `json:"ctlog,omitempty"`

	// rekor
	Rekor *Rekor `json:"rekor,omitempty"`

	// secret
	Secret *SecretReference `json:"secret,omitempty"`
}

// Validate validates this static key attestor
func (m *StaticKeyAttestor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCtlog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRekor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecret(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StaticKeyAttestor) validateCtlog(formats strfmt.Registry) error {
	if swag.IsZero(m.Ctlog) { // not required
		return nil
	}

	if m.Ctlog != nil {
		if err := m.Ctlog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ctlog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ctlog")
			}
			return err
		}
	}

	return nil
}

func (m *StaticKeyAttestor) validateRekor(formats strfmt.Registry) error {
	if swag.IsZero(m.Rekor) { // not required
		return nil
	}

	if m.Rekor != nil {
		if err := m.Rekor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rekor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rekor")
			}
			return err
		}
	}

	return nil
}

func (m *StaticKeyAttestor) validateSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.Secret) { // not required
		return nil
	}

	if m.Secret != nil {
		if err := m.Secret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secret")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secret")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this static key attestor based on the context it is used
func (m *StaticKeyAttestor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCtlog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRekor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecret(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StaticKeyAttestor) contextValidateCtlog(ctx context.Context, formats strfmt.Registry) error {

	if m.Ctlog != nil {
		if err := m.Ctlog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ctlog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ctlog")
			}
			return err
		}
	}

	return nil
}

func (m *StaticKeyAttestor) contextValidateRekor(ctx context.Context, formats strfmt.Registry) error {

	if m.Rekor != nil {
		if err := m.Rekor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rekor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rekor")
			}
			return err
		}
	}

	return nil
}

func (m *StaticKeyAttestor) contextValidateSecret(ctx context.Context, formats strfmt.Registry) error {

	if m.Secret != nil {
		if err := m.Secret.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secret")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secret")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StaticKeyAttestor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StaticKeyAttestor) UnmarshalBinary(b []byte) error {
	var res StaticKeyAttestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
