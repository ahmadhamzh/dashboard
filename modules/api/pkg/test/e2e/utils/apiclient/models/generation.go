// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Generation Generation defines how new resources should be created and managed.
//
// swagger:model Generation
type Generation struct {

	// APIVersion specifies resource apiVersion.
	// +optional
	APIVersion string `json:"apiVersion,omitempty"`

	// ForEach applies generate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
	// +optional
	ForEachGeneration []*ForEachGeneration `json:"foreach"`

	// GenerateExisting controls whether to trigger the rule in existing resources
	// If is set to "true" the rule will be triggered and applied to existing matched resources.
	// +optional
	GenerateExisting bool `json:"generateExisting,omitempty"`

	// Kind specifies resource kind.
	Kind string `json:"kind,omitempty"`

	// Name specifies the resource name.
	// +optional
	Name string `json:"name,omitempty"`

	// Namespace specifies resource namespace.
	// +optional
	Namespace string `json:"namespace,omitempty"`

	// OrphanDownstreamOnPolicyDelete controls whether generated resources should be deleted when the rule that generated
	// them is deleted with synchronization enabled. This option is only applicable to generate rules of the data type.
	// See https://kyverno.io/docs/writing-policies/generate/#data-examples.
	// Defaults to "false" if not specified.
	// +optional
	OrphanDownstreamOnPolicyDelete bool `json:"orphanDownstreamOnPolicyDelete,omitempty"`

	// Synchronize controls if generated resources should be kept in-sync with their source resource.
	// If Synchronize is set to "true" changes to generated resources will be overwritten with resource
	// data from Data or the resource specified in the Clone declaration.
	// Optional. Defaults to "false" if not specified.
	// +optional
	Synchronize bool `json:"synchronize,omitempty"`

	// clone
	Clone *CloneFrom `json:"clone,omitempty"`

	// clone list
	CloneList *CloneList `json:"cloneList,omitempty"`

	// data
	Data JSON `json:"data,omitempty"`

	// uid
	UID UID `json:"uid,omitempty"`
}

// Validate validates this generation
func (m *Generation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateForEachGeneration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloneList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Generation) validateForEachGeneration(formats strfmt.Registry) error {
	if swag.IsZero(m.ForEachGeneration) { // not required
		return nil
	}

	for i := 0; i < len(m.ForEachGeneration); i++ {
		if swag.IsZero(m.ForEachGeneration[i]) { // not required
			continue
		}

		if m.ForEachGeneration[i] != nil {
			if err := m.ForEachGeneration[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("foreach" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("foreach" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Generation) validateClone(formats strfmt.Registry) error {
	if swag.IsZero(m.Clone) { // not required
		return nil
	}

	if m.Clone != nil {
		if err := m.Clone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clone")
			}
			return err
		}
	}

	return nil
}

func (m *Generation) validateCloneList(formats strfmt.Registry) error {
	if swag.IsZero(m.CloneList) { // not required
		return nil
	}

	if m.CloneList != nil {
		if err := m.CloneList.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloneList")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloneList")
			}
			return err
		}
	}

	return nil
}

func (m *Generation) validateUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if err := m.UID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("uid")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("uid")
		}
		return err
	}

	return nil
}

// ContextValidate validate this generation based on the context it is used
func (m *Generation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateForEachGeneration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloneList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Generation) contextValidateForEachGeneration(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ForEachGeneration); i++ {

		if m.ForEachGeneration[i] != nil {
			if err := m.ForEachGeneration[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("foreach" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("foreach" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Generation) contextValidateClone(ctx context.Context, formats strfmt.Registry) error {

	if m.Clone != nil {
		if err := m.Clone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clone")
			}
			return err
		}
	}

	return nil
}

func (m *Generation) contextValidateCloneList(ctx context.Context, formats strfmt.Registry) error {

	if m.CloneList != nil {
		if err := m.CloneList.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloneList")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloneList")
			}
			return err
		}
	}

	return nil
}

func (m *Generation) contextValidateUID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("uid")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("uid")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Generation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Generation) UnmarshalBinary(b []byte) error {
	var res Generation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
