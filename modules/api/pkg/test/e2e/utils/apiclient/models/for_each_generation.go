// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ForEachGeneration for each generation
//
// swagger:model ForEachGeneration
type ForEachGeneration struct {

	// APIVersion specifies resource apiVersion.
	// +optional
	APIVersion string `json:"apiVersion,omitempty"`

	// Context defines variables and data sources that can be used during rule execution.
	// +optional
	Context []*ContextEntry `json:"context"`

	// Kind specifies resource kind.
	Kind string `json:"kind,omitempty"`

	// List specifies a JMESPath expression that results in one or more elements
	// to which the validation logic is applied.
	List string `json:"list,omitempty"`

	// Name specifies the resource name.
	// +optional
	Name string `json:"name,omitempty"`

	// Namespace specifies resource namespace.
	// +optional
	Namespace string `json:"namespace,omitempty"`

	// clone
	Clone *CloneFrom `json:"clone,omitempty"`

	// clone list
	CloneList *CloneList `json:"cloneList,omitempty"`

	// data
	Data JSON `json:"data,omitempty"`

	// preconditions
	Preconditions *AnyAllConditions `json:"preconditions,omitempty"`

	// uid
	UID UID `json:"uid,omitempty"`
}

// Validate validates this for each generation
func (m *ForEachGeneration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloneList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreconditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ForEachGeneration) validateContext(formats strfmt.Registry) error {
	if swag.IsZero(m.Context) { // not required
		return nil
	}

	for i := 0; i < len(m.Context); i++ {
		if swag.IsZero(m.Context[i]) { // not required
			continue
		}

		if m.Context[i] != nil {
			if err := m.Context[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("context" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("context" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ForEachGeneration) validateClone(formats strfmt.Registry) error {
	if swag.IsZero(m.Clone) { // not required
		return nil
	}

	if m.Clone != nil {
		if err := m.Clone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clone")
			}
			return err
		}
	}

	return nil
}

func (m *ForEachGeneration) validateCloneList(formats strfmt.Registry) error {
	if swag.IsZero(m.CloneList) { // not required
		return nil
	}

	if m.CloneList != nil {
		if err := m.CloneList.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloneList")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloneList")
			}
			return err
		}
	}

	return nil
}

func (m *ForEachGeneration) validatePreconditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Preconditions) { // not required
		return nil
	}

	if m.Preconditions != nil {
		if err := m.Preconditions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preconditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preconditions")
			}
			return err
		}
	}

	return nil
}

func (m *ForEachGeneration) validateUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if err := m.UID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("uid")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("uid")
		}
		return err
	}

	return nil
}

// ContextValidate validate this for each generation based on the context it is used
func (m *ForEachGeneration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloneList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreconditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ForEachGeneration) contextValidateContext(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Context); i++ {

		if m.Context[i] != nil {

			if swag.IsZero(m.Context[i]) { // not required
				return nil
			}

			if err := m.Context[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("context" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("context" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ForEachGeneration) contextValidateClone(ctx context.Context, formats strfmt.Registry) error {

	if m.Clone != nil {

		if swag.IsZero(m.Clone) { // not required
			return nil
		}

		if err := m.Clone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clone")
			}
			return err
		}
	}

	return nil
}

func (m *ForEachGeneration) contextValidateCloneList(ctx context.Context, formats strfmt.Registry) error {

	if m.CloneList != nil {

		if swag.IsZero(m.CloneList) { // not required
			return nil
		}

		if err := m.CloneList.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloneList")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloneList")
			}
			return err
		}
	}

	return nil
}

func (m *ForEachGeneration) contextValidatePreconditions(ctx context.Context, formats strfmt.Registry) error {

	if m.Preconditions != nil {

		if swag.IsZero(m.Preconditions) { // not required
			return nil
		}

		if err := m.Preconditions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preconditions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preconditions")
			}
			return err
		}
	}

	return nil
}

func (m *ForEachGeneration) contextValidateUID(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if err := m.UID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("uid")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("uid")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ForEachGeneration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ForEachGeneration) UnmarshalBinary(b []byte) error {
	var res ForEachGeneration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
