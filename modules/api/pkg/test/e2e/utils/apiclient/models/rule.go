// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Rule Rule defines a validation, mutation, or generation control for matching resources.
//
// Each rules contains a match declaration to select resources, and an optional exclude
// declaration to specify which resources to exclude.
//
// swagger:model Rule
type Rule struct {

	// CELPreconditions are used to determine if a policy rule should be applied by evaluating a
	// set of CEL conditions. It can only be used with the validate.cel subrule
	// +optional
	CELPreconditions []*MatchCondition `json:"celPreconditions"`

	// Context defines variables and data sources that can be used during rule execution.
	// +optional
	Context []*ContextEntry `json:"context"`

	// Name is a label to identify the rule, It must be unique within the policy.
	// +kubebuilder:validation:MaxLength=63
	Name string `json:"name,omitempty"`

	// ReportProperties are the additional properties from the rule that will be added to the policy report result
	// +optional
	ReportProperties map[string]string `json:"reportProperties,omitempty"`

	// SkipBackgroundRequests bypasses admission requests that are sent by the background controller.
	// The default value is set to "true", it must be set to "false" to apply
	// generate and mutateExisting rules to those requests.
	// +kubebuilder:default=true
	// +kubebuilder:validation:Optional
	SkipBackgroundRequests bool `json:"skipBackgroundRequests,omitempty"`

	// VerifyImages is used to verify image signatures and mutate them to add a digest
	// +optional
	VerifyImages []*ImageVerification `json:"verifyImages"`

	// exclude
	Exclude *MatchResources `json:"exclude,omitempty"`

	// generate
	Generate *Generation `json:"generate,omitempty"`

	// image extractors
	ImageExtractors ImageExtractorConfigs `json:"imageExtractors,omitempty"`

	// match
	Match *MatchResources `json:"match,omitempty"`

	// mutate
	Mutate *Mutation `json:"mutate,omitempty"`

	// preconditions
	Preconditions ConditionsWrapper `json:"preconditions,omitempty"`

	// validate
	Validate *Validation `json:"validate,omitempty"`
}

// Validate validates this rule
func (m *Rule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCELPreconditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerifyImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExclude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenerate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageExtractors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMutate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rule) validateCELPreconditions(formats strfmt.Registry) error {
	if swag.IsZero(m.CELPreconditions) { // not required
		return nil
	}

	for i := 0; i < len(m.CELPreconditions); i++ {
		if swag.IsZero(m.CELPreconditions[i]) { // not required
			continue
		}

		if m.CELPreconditions[i] != nil {
			if err := m.CELPreconditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("celPreconditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("celPreconditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Rule) validateContext(formats strfmt.Registry) error {
	if swag.IsZero(m.Context) { // not required
		return nil
	}

	for i := 0; i < len(m.Context); i++ {
		if swag.IsZero(m.Context[i]) { // not required
			continue
		}

		if m.Context[i] != nil {
			if err := m.Context[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("context" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("context" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Rule) validateVerifyImages(formats strfmt.Registry) error {
	if swag.IsZero(m.VerifyImages) { // not required
		return nil
	}

	for i := 0; i < len(m.VerifyImages); i++ {
		if swag.IsZero(m.VerifyImages[i]) { // not required
			continue
		}

		if m.VerifyImages[i] != nil {
			if err := m.VerifyImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verifyImages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verifyImages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Rule) validateExclude(formats strfmt.Registry) error {
	if swag.IsZero(m.Exclude) { // not required
		return nil
	}

	if m.Exclude != nil {
		if err := m.Exclude.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exclude")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exclude")
			}
			return err
		}
	}

	return nil
}

func (m *Rule) validateGenerate(formats strfmt.Registry) error {
	if swag.IsZero(m.Generate) { // not required
		return nil
	}

	if m.Generate != nil {
		if err := m.Generate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generate")
			}
			return err
		}
	}

	return nil
}

func (m *Rule) validateImageExtractors(formats strfmt.Registry) error {
	if swag.IsZero(m.ImageExtractors) { // not required
		return nil
	}

	if m.ImageExtractors != nil {
		if err := m.ImageExtractors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("imageExtractors")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("imageExtractors")
			}
			return err
		}
	}

	return nil
}

func (m *Rule) validateMatch(formats strfmt.Registry) error {
	if swag.IsZero(m.Match) { // not required
		return nil
	}

	if m.Match != nil {
		if err := m.Match.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("match")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("match")
			}
			return err
		}
	}

	return nil
}

func (m *Rule) validateMutate(formats strfmt.Registry) error {
	if swag.IsZero(m.Mutate) { // not required
		return nil
	}

	if m.Mutate != nil {
		if err := m.Mutate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mutate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mutate")
			}
			return err
		}
	}

	return nil
}

func (m *Rule) validateValidate(formats strfmt.Registry) error {
	if swag.IsZero(m.Validate) { // not required
		return nil
	}

	if m.Validate != nil {
		if err := m.Validate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rule based on the context it is used
func (m *Rule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCELPreconditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVerifyImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExclude(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGenerate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImageExtractors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMutate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rule) contextValidateCELPreconditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CELPreconditions); i++ {

		if m.CELPreconditions[i] != nil {
			if err := m.CELPreconditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("celPreconditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("celPreconditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Rule) contextValidateContext(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Context); i++ {

		if m.Context[i] != nil {
			if err := m.Context[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("context" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("context" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Rule) contextValidateVerifyImages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VerifyImages); i++ {

		if m.VerifyImages[i] != nil {
			if err := m.VerifyImages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("verifyImages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("verifyImages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Rule) contextValidateExclude(ctx context.Context, formats strfmt.Registry) error {

	if m.Exclude != nil {
		if err := m.Exclude.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exclude")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exclude")
			}
			return err
		}
	}

	return nil
}

func (m *Rule) contextValidateGenerate(ctx context.Context, formats strfmt.Registry) error {

	if m.Generate != nil {
		if err := m.Generate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generate")
			}
			return err
		}
	}

	return nil
}

func (m *Rule) contextValidateImageExtractors(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ImageExtractors.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("imageExtractors")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("imageExtractors")
		}
		return err
	}

	return nil
}

func (m *Rule) contextValidateMatch(ctx context.Context, formats strfmt.Registry) error {

	if m.Match != nil {
		if err := m.Match.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("match")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("match")
			}
			return err
		}
	}

	return nil
}

func (m *Rule) contextValidateMutate(ctx context.Context, formats strfmt.Registry) error {

	if m.Mutate != nil {
		if err := m.Mutate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mutate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mutate")
			}
			return err
		}
	}

	return nil
}

func (m *Rule) contextValidateValidate(ctx context.Context, formats strfmt.Registry) error {

	if m.Validate != nil {
		if err := m.Validate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Rule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rule) UnmarshalBinary(b []byte) error {
	var res Rule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
