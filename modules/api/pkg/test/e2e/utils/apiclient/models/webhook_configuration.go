// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WebhookConfiguration WebhookConfiguration specifies the configuration for Kubernetes admission webhookconfiguration.
//
// swagger:model WebhookConfiguration
type WebhookConfiguration struct {

	// MatchCondition configures admission webhook matchConditions.
	// Requires Kubernetes 1.27 or later.
	// +optional
	MatchConditions []*MatchCondition `json:"matchConditions"`

	// TimeoutSeconds specifies the maximum time in seconds allowed to apply this policy.
	// After the configured time expires, the admission request may fail, or may simply ignore the policy results,
	// based on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.
	TimeoutSeconds int32 `json:"timeoutSeconds,omitempty"`

	// failure policy
	FailurePolicy FailurePolicyType `json:"failurePolicy,omitempty"`
}

// Validate validates this webhook configuration
func (m *WebhookConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailurePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhookConfiguration) validateMatchConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchConditions) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchConditions); i++ {
		if swag.IsZero(m.MatchConditions[i]) { // not required
			continue
		}

		if m.MatchConditions[i] != nil {
			if err := m.MatchConditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchConditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("matchConditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WebhookConfiguration) validateFailurePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.FailurePolicy) { // not required
		return nil
	}

	if err := m.FailurePolicy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("failurePolicy")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("failurePolicy")
		}
		return err
	}

	return nil
}

// ContextValidate validate this webhook configuration based on the context it is used
func (m *WebhookConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMatchConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailurePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhookConfiguration) contextValidateMatchConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MatchConditions); i++ {

		if m.MatchConditions[i] != nil {

			if swag.IsZero(m.MatchConditions[i]) { // not required
				return nil
			}

			if err := m.MatchConditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchConditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("matchConditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WebhookConfiguration) contextValidateFailurePolicy(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.FailurePolicy) { // not required
		return nil
	}

	if err := m.FailurePolicy.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("failurePolicy")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("failurePolicy")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebhookConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebhookConfiguration) UnmarshalBinary(b []byte) error {
	var res WebhookConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
