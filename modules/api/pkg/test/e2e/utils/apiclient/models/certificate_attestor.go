// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CertificateAttestor certificate attestor
//
// swagger:model CertificateAttestor
type CertificateAttestor struct {

	// Cert is an optional PEM-encoded public certificate.
	// +kubebuilder:validation:Optional
	Certificate string `json:"cert,omitempty"`

	// CertChain is an optional PEM encoded set of certificates used to verify.
	// +kubebuilder:validation:Optional
	CertificateChain string `json:"certChain,omitempty"`

	// ctlog
	Ctlog *CTLog `json:"ctlog,omitempty"`

	// rekor
	Rekor *Rekor `json:"rekor,omitempty"`
}

// Validate validates this certificate attestor
func (m *CertificateAttestor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCtlog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRekor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateAttestor) validateCtlog(formats strfmt.Registry) error {
	if swag.IsZero(m.Ctlog) { // not required
		return nil
	}

	if m.Ctlog != nil {
		if err := m.Ctlog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ctlog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ctlog")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateAttestor) validateRekor(formats strfmt.Registry) error {
	if swag.IsZero(m.Rekor) { // not required
		return nil
	}

	if m.Rekor != nil {
		if err := m.Rekor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rekor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rekor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this certificate attestor based on the context it is used
func (m *CertificateAttestor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCtlog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRekor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateAttestor) contextValidateCtlog(ctx context.Context, formats strfmt.Registry) error {

	if m.Ctlog != nil {
		if err := m.Ctlog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ctlog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ctlog")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateAttestor) contextValidateRekor(ctx context.Context, formats strfmt.Registry) error {

	if m.Rekor != nil {
		if err := m.Rekor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rekor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rekor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateAttestor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateAttestor) UnmarshalBinary(b []byte) error {
	var res CertificateAttestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
