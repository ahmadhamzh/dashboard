// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Attestor attestor
//
// swagger:model Attestor
type Attestor struct {

	// Annotations are used for image verification.
	// Every specified key-value pair must exist and match in the verified payload.
	// The payload may contain other key-value pairs.
	Annotations map[string]string `json:"annotations,omitempty"`

	// Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule.
	// If specified Repository will override other OCI image repository locations for this Attestor.
	Repository string `json:"repository,omitempty"`

	// Specify signature algorithm for public keys. Supported values are sha224, sha256, sha384 and sha512.
	// +kubebuilder:default=sha256
	SignatureAlgorithm string `json:"signatureAlgorithm,omitempty"`

	// attestor
	Attestor JSON `json:"attestor,omitempty"`

	// certificates
	Certificates *CertificateAttestor `json:"certificates,omitempty"`

	// keyless
	Keyless *KeylessAttestor `json:"keyless,omitempty"`

	// keys
	Keys *StaticKeyAttestor `json:"keys,omitempty"`
}

// Validate validates this attestor
func (m *Attestor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyless(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Attestor) validateCertificates(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificates) { // not required
		return nil
	}

	if m.Certificates != nil {
		if err := m.Certificates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificates")
			}
			return err
		}
	}

	return nil
}

func (m *Attestor) validateKeyless(formats strfmt.Registry) error {
	if swag.IsZero(m.Keyless) { // not required
		return nil
	}

	if m.Keyless != nil {
		if err := m.Keyless.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keyless")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keyless")
			}
			return err
		}
	}

	return nil
}

func (m *Attestor) validateKeys(formats strfmt.Registry) error {
	if swag.IsZero(m.Keys) { // not required
		return nil
	}

	if m.Keys != nil {
		if err := m.Keys.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keys")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keys")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this attestor based on the context it is used
func (m *Attestor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeyless(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Attestor) contextValidateCertificates(ctx context.Context, formats strfmt.Registry) error {

	if m.Certificates != nil {

		if swag.IsZero(m.Certificates) { // not required
			return nil
		}

		if err := m.Certificates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificates")
			}
			return err
		}
	}

	return nil
}

func (m *Attestor) contextValidateKeyless(ctx context.Context, formats strfmt.Registry) error {

	if m.Keyless != nil {

		if swag.IsZero(m.Keyless) { // not required
			return nil
		}

		if err := m.Keyless.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keyless")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keyless")
			}
			return err
		}
	}

	return nil
}

func (m *Attestor) contextValidateKeys(ctx context.Context, formats strfmt.Registry) error {

	if m.Keys != nil {

		if swag.IsZero(m.Keys) { // not required
			return nil
		}

		if err := m.Keys.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keys")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keys")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Attestor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Attestor) UnmarshalBinary(b []byte) error {
	var res Attestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
