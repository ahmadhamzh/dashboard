// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KeylessAttestor keyless attestor
//
// swagger:model KeylessAttestor
type KeylessAttestor struct {

	// AdditionalExtensions are certificate-extensions used for keyless signing.
	// +kubebuilder:validation:Optional
	AdditionalExtensions map[string]string `json:"additionalExtensions,omitempty"`

	// Issuer is the certificate issuer used for keyless signing.
	// +kubebuilder:validation:Optional
	Issuer string `json:"issuer,omitempty"`

	// IssuerRegExp is the regular expression to match certificate issuer used for keyless signing.
	// +kubebuilder:validation:Optional
	IssuerRegExp string `json:"issuerRegExp,omitempty"`

	// Roots is an optional set of PEM encoded trusted root certificates.
	// If not provided, the system roots are used.
	// +kubebuilder:validation:Optional
	Roots string `json:"roots,omitempty"`

	// Subject is the verified identity used for keyless signing, for example the email address.
	// +kubebuilder:validation:Optional
	Subject string `json:"subject,omitempty"`

	// SubjectRegExp is the regular expression to match identity used for keyless signing, for example the email address.
	// +kubebuilder:validation:Optional
	SubjectRegExp string `json:"subjectRegExp,omitempty"`

	// ctlog
	Ctlog *CTLog `json:"ctlog,omitempty"`

	// rekor
	Rekor *Rekor `json:"rekor,omitempty"`
}

// Validate validates this keyless attestor
func (m *KeylessAttestor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCtlog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRekor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeylessAttestor) validateCtlog(formats strfmt.Registry) error {
	if swag.IsZero(m.Ctlog) { // not required
		return nil
	}

	if m.Ctlog != nil {
		if err := m.Ctlog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ctlog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ctlog")
			}
			return err
		}
	}

	return nil
}

func (m *KeylessAttestor) validateRekor(formats strfmt.Registry) error {
	if swag.IsZero(m.Rekor) { // not required
		return nil
	}

	if m.Rekor != nil {
		if err := m.Rekor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rekor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rekor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this keyless attestor based on the context it is used
func (m *KeylessAttestor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCtlog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRekor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeylessAttestor) contextValidateCtlog(ctx context.Context, formats strfmt.Registry) error {

	if m.Ctlog != nil {

		if swag.IsZero(m.Ctlog) { // not required
			return nil
		}

		if err := m.Ctlog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ctlog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ctlog")
			}
			return err
		}
	}

	return nil
}

func (m *KeylessAttestor) contextValidateRekor(ctx context.Context, formats strfmt.Registry) error {

	if m.Rekor != nil {

		if swag.IsZero(m.Rekor) { // not required
			return nil
		}

		if err := m.Rekor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rekor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rekor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KeylessAttestor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeylessAttestor) UnmarshalBinary(b []byte) error {
	var res KeylessAttestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
