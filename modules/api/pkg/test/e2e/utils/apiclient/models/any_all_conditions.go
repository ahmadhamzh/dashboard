// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AnyAllConditions AnyAllConditions consists of conditions wrapped denoting a logical criteria to be fulfilled.
//
// AnyConditions get fulfilled when at least one of its sub-conditions passes.
// AllConditions get fulfilled only when all of its sub-conditions pass.
//
// swagger:model AnyAllConditions
type AnyAllConditions struct {

	// AllConditions enable variable-based conditional rule execution. This is useful for
	// finer control of when an rule is applied. A condition can reference object data
	// using JMESPath notation.
	// Here, all of the conditions need to pass
	// +optional
	AllConditions []*Condition `json:"all"`

	// AnyConditions enable variable-based conditional rule execution. This is useful for
	// finer control of when an rule is applied. A condition can reference object data
	// using JMESPath notation.
	// Here, at least one of the conditions need to pass
	// +optional
	AnyConditions []*Condition `json:"any"`
}

// Validate validates this any all conditions
func (m *AnyAllConditions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnyConditions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnyAllConditions) validateAllConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.AllConditions) { // not required
		return nil
	}

	for i := 0; i < len(m.AllConditions); i++ {
		if swag.IsZero(m.AllConditions[i]) { // not required
			continue
		}

		if m.AllConditions[i] != nil {
			if err := m.AllConditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("all" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("all" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AnyAllConditions) validateAnyConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.AnyConditions) { // not required
		return nil
	}

	for i := 0; i < len(m.AnyConditions); i++ {
		if swag.IsZero(m.AnyConditions[i]) { // not required
			continue
		}

		if m.AnyConditions[i] != nil {
			if err := m.AnyConditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("any" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("any" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this any all conditions based on the context it is used
func (m *AnyAllConditions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAnyConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnyAllConditions) contextValidateAllConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AllConditions); i++ {

		if m.AllConditions[i] != nil {
			if err := m.AllConditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("all" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("all" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AnyAllConditions) contextValidateAnyConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AnyConditions); i++ {

		if m.AnyConditions[i] != nil {
			if err := m.AnyConditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("any" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("any" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnyAllConditions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnyAllConditions) UnmarshalBinary(b []byte) error {
	var res AnyAllConditions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
